generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  category_id    Int              @id @default(autoincrement())
  category       String           @unique @db.VarChar(100)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  games_category games_category[]
}

model consoles {
  console_id    Int             @id @default(autoincrement())
  console       String          @unique @db.VarChar(20)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  games_console games_console[]
}

model fqa {
  fqa_id     Int      @id @default(autoincrement())
  fqa_title  String   @db.VarChar(50)
  fqa_answer String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model games {
  game_id        Int              @id @default(autoincrement())
  game_name      String           @unique @db.VarChar(100)
  game_banner    Bytes?
  game_score     Int?             @default(0)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  games_category games_category[]
  games_console  games_console[]
  games_info     games_info[]
  user_score     user_score[]
}

model games_category {
  game_category_id Int         @id @default(autoincrement())
  game_id          Int?
  category_id      Int?
  created_at       DateTime    @default(now()) @db.Timestamp(6)
  updated_at       DateTime    @default(now()) @db.Timestamp(6)
  categories       categories? @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  games            games?      @relation(fields: [game_id], references: [game_id], onDelete: NoAction, onUpdate: NoAction)
}

model games_info {
  info_id                Int      @id @default(autoincrement())
  game_id                Int
  game_sinopsis          String
  game_features_specific String?
  game_features_general  String?
  game_fpage             Bytes?
  created_at             DateTime @default(now()) @db.Timestamp(6)
  updated_at             DateTime @default(now()) @db.Timestamp(6)
  games                  games    @relation(fields: [game_id], references: [game_id], onDelete: NoAction, onUpdate: NoAction)
}

model user_question {
  question_id   Int      @id @default(autoincrement())
  user_id       Int
  question_info String
  created_at    DateTime @default(now()) @db.Timestamp(6)
  users         users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user_score {
  score_id   Int      @id @default(autoincrement())
  user_id    Int
  game_id    Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  score      Int?
  games      games    @relation(fields: [game_id], references: [game_id], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id       Int             @id @default(autoincrement())
  user_name     String          @db.VarChar(50)
  user_email    String          @unique @db.VarChar(100)
  user_password String          @db.VarChar(50)
  user_admin    Int             @default(0)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  user_question user_question[]
  user_score    user_score[]
}

model games_console {
  game_console_id Int       @id @default(autoincrement())
  game_id         Int?
  console_id      Int?
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  consoles        consoles? @relation(fields: [console_id], references: [console_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_consoles")
  games           games?    @relation(fields: [game_id], references: [game_id], onDelete: NoAction, onUpdate: NoAction)
}
